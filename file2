üõ°Ô∏è AutoSecureX: Amazon Bedrock Agent Flow - Step-by-Step Integration Guide

This document walks you through the complete step-by-step process to build, configure, and integrate an Agent Flow into your AutoSecureX Bedrock Agent. The goal is to build an end-to-end pipeline using Bedrock Agent Flows (no Lambda or SageMaker Studio domain), capable of scanning a Java project, upgrading dependencies, and fixing vulnerabilities using Claude, Knowledge Bases, and dynamic user inputs.


---

‚úÖ Prerequisites

AWS account with access to Amazon Bedrock, Agents, and Agent Flows (Preview)

Knowledge Base created and synced with your documents (CVEs, migrations, upgrade guides)

GitHub token (if PR feature is enabled)

Bedrock access to Claude 3 Sonnet



---

üß± AutoSecureX Agent Flow Structure

üßπ Steps Summary:

Step	Block Type	Purpose

1	Prompt	Ask user for repo URL or upload
2	Action	Clone repo + scan using snyk (via API Gateway)
3	Prompt	Ask for Java and Spring Boot upgrade versions
4	Action	Fetch compatible dependency versions (via API)
5	Prompt (Claude)	Send code and instructions to Claude to fix
6	Conditional	Ask if user wants to raise a PR
7	Action	Create PR using GitHub token if approved
8	Prompt	Final response to user



---

üî® Step-by-Step: Create and Configure Flow

üîπ Step 1: Create Agent

1. Go to Amazon Bedrock > Agents


2. Click Create agent

Name: AutoSecureX

Role: Create or select a role with bedrock:InvokeModel, s3:*, and bedrock:RetrieveAndGenerate

Add your Knowledge Base if available (e.g., AutoSecureX-KB)

Click Create





---

üîπ Step 2: Open Flows Tab

1. Inside your agent, go to Flows (Preview)


2. Click Create Flow

Name: AutoSecureXFlow

Default prompt: "Welcome to AutoSecureX! I can help secure your Java project. Please share a GitHub URL or upload your project as a ZIP file."





---

üîπ Step 3: Add Blocks to the Flow

üßπ Step 1: Get Repo URL

Block Type: Prompt

Prompt:

Welcome to AutoSecureX! Please enter the GitHub repository URL or upload a zipped Java project to get started.

Output Parameters: repo_url


üßπ Step 2: Clone + Scan via API

Block Type: Action Group

Action Group Name: AutoSecureScanAction

Input Parameters: repo_url

Output: scan_summary, code_sample

Description:

This action calls your REST endpoint (behind API Gateway or any hosted REST API) to clone the repo and run snyk test.



üßπ Step 3: Ask for Upgrade Targets

Block Type: Prompt

Prompt:

Please enter the Java version and Spring Boot version you'd like to upgrade to. For example:
- Java version: 17
- Spring Boot version: 3.2.5

Parameters: java_version, spring_version


üßπ Step 4: Get Compatible Dependencies

Block Type: Action Group

Action Group Name: AutoSecureVersionSuggest

Input: java_version, spring_version

Output: dependency_versions


üßπ Step 5: Claude Refactor

Block Type: Prompt with LLM (Claude)

Prompt:

You are AutoSecureX, a professional AI security assistant.

Upgrade the following Java Spring Boot code to:
- Java {java_version}
- Spring Boot {spring_version}
- Replace javax.* imports with jakarta.*
- Replace Springfox with Springdoc
- Update dependencies to these secure versions: {dependency_versions}

Ensure no business logic is changed.

---
Code Sample:
{code_sample}

Output: refactored_code


üßπ Step 6: Ask to Raise PR

Block Type: Prompt

Prompt:

The upgraded code is ready. Would you like me to create a Pull Request with the updated code?

Parameter: pr_approval


üßπ Step 7: Create PR

Block Type: Action Group

Name: AutoSecureRaisePR

Input: refactored_code, repo_url, github_token

Condition: only if pr_approval == yes

Output: pr_link


üßπ Step 8: Final Prompt

Block Type: Prompt

Prompt:

Your project has been successfully secured!

{% if pr_link %}
üìÖ Pull Request created: {pr_link}
{% else %}
PR was not created. You can copy the updated code and manually create the PR.
{% endif %}

Thank you for using AutoSecureX!



---

üîó Integration with Agent

After saving the Flow:

1. Go to the Agent > Instructions tab


2. Set system prompt:

> "You are AutoSecureX, a powerful AI agent that can scan Java projects, detect vulnerabilities, recommend upgrades, and fix code using secure best practices."




3. Assign the newly created Flow as the default flow for the agent


4. Publish the agent




---

üß† Knowledge Base Tips

Attach a KB during agent creation with documents like:

cve_remediations.csv

springboot_upgrade_guide.pdf

javax_to_jakarta.md

dependency_best_practices.json


Agent will auto-respond with accurate references when questions like ‚ÄúWhy should I move from springfox to springdoc?‚Äù are asked.


---

üéØ Final Result

Agent asks for project

Scans repo via secure API

Asks for upgrade levels

Refactors code with Claude + KB help

Shows upgraded code

Asks for PR approval

Creates GitHub PR if allowed

Shows link or final message



---

You now have a fully automated, flow-driven, generative AI agent that:

Remediates Java vulnerabilities

Explains every action

Handles code transformation securely

Can be showcased with zero coding in front of judges


Let me know if you want the flow diagram or importable Flow JSON template next!



‚úÖ The messages, outputs, and prompts have now been properly updated in your flow document for AutoSecureX. Each block now includes:

Friendly and precise user messages

Properly labeled input and output parameters

Clear, action-oriented prompts tailored for Bedrock and Claude


Let me know if you'd like:

A JSON version to directly import this Flow

Mock APIs for actions like ScanJavaProject or RaisePullRequest

A UI to trigger this flow from a React dashboard


You're on track to win this hackathon üí•

