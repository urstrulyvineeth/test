You're absolutely right, Vineeth â€” and thanks for the heads-up!
Bedrock Flow Prompt Blocks require {{variable}} syntax to pass data across nodes, and those were missing in a few places above.

Letâ€™s now fix all the prompt blocks step-by-step, ensuring every variable is declared using proper {{ }} so they connect correctly to the next blocks.


---

âœ… Fixed & Finalized Prompt Blocks for AutoSecureX


---

ðŸŸ¢ Input Node (Block 1)

Expected output variables:

{
  "repo_url": "https://github.com/example/project",
  "s3_input_bucket": "account1-env5-s3-bucket-457650192243",
  "s3_input_key": "autosecure-input/MyProject.zip",
  "inline_java_project": ""
}


---

ðŸ”µ Prompt Block 1: Validate Input & Confirm Source

You are AutoSecure â€” an intelligent vulnerability scanner agent.

Check which of the following inputs the user has provided:

1. GitHub URL: `{{repo_url}}`
2. S3 Bucket: `{{s3_input_bucket}}`
3. S3 Key: `{{s3_input_key}}`
4. Inline Project: `{{inline_java_project}}`

Decide which one of the three project input types is present:
- "repo" (for GitHub)
- "s3" (for S3 + key)
- "inline" (if code is pasted)

Return the detected source type in a field called `source_type`.

Then politely confirm with the user which one will be used for scanning.

Return this:
```json
{
  "source_type": "s3"
}

âœ… Output variables:
- `source_type`

---

### ðŸ”µ **Prompt Block 2: Generate input.json**

```txt
Based on the following values:

- Source: `{{source_type}}`
- Repo URL: `{{repo_url}}`
- S3 Bucket: `{{s3_input_bucket}}`
- S3 Key: `{{s3_input_key}}`
- Inline Code: `{{inline_java_project}}`

Generate a clean JSON file to be saved in S3 as `input.json`.

Return it like this:

```json
{
  "source": "{{source_type}}",
  "repo_url": "{{repo_url}}",
  "s3_input_bucket": "{{s3_input_bucket}}",
  "s3_input_key": "{{s3_input_key}}",
  "inline_java_project": "{{inline_java_project}}"
}

Do not add explanation. Just output the JSON block only.

âœ… Output variable:
- `input_json` (auto-captured if you add `"input_json": <<response block>>` as key-value output)

---

### ðŸ”µ **Prompt Block 3: Trigger SageMaker notebook scan**

```txt
We have collected the project and saved it to input.json in:

- Bucket: `account1-env5-s3-bucket-457650192243`
- Key: `autosecure-input/input.json`

Now trigger the SageMaker notebook:
- Instance: `account1-env5-sagemaker-notebook-instance`
- Notebook file: `autosecure-scanner.ipynb`

This will:
1. Download the project from GitHub or S3
2. Run vulnerability scan using Snyk
3. Upload results to:
   - `autosecure-output/before-scan-summary.json`

Please notify the user that the scan is now in progress.

âœ… No output needed â€” just notification.


---

ðŸ”µ Prompt Block 4: Show scan results

> Letâ€™s assume notebook uploaded this file to S3:



{
  "before_critical": 5,
  "before_high": 12,
  "before_medium": 7,
  "before_low": 4
}

Scan completed. Vulnerabilities found:

- ðŸ”´ Critical: {{before_critical}}
- ðŸŸ  High: {{before_high}}
- ðŸŸ¡ Medium: {{before_medium}}
- ðŸŸ¢ Low: {{before_low}}

Please provide:
- Desired Java version (e.g., 17)
- Desired Spring Boot version (e.g., 3.2.1)
- Should all other dependencies be upgraded? (yes/no)

Return:
```json
{
  "target_java_version": "17",
  "target_spring_version": "3.2.1",
  "upgrade_all_dependencies": "yes"
}

âœ… Output variables:
- `target_java_version`
- `target_spring_version`
- `upgrade_all_dependencies`

---

### ðŸ”µ **Prompt Block 5: Confirm upgrade plan and re-trigger notebook**

```txt
You are about to upgrade the project using the following configuration:

- Java version: {{target_java_version}}
- Spring Boot version: {{target_spring_version}}
- Upgrade all dependencies: {{upgrade_all_dependencies}}

Now re-trigger the same notebook:
- It will apply upgrades and upload:
   - `autosecure-output/fixed.zip`
   - `autosecure-output/after-scan-summary.json`

Notify the user that the upgrade and second scan are now running.

âœ… No new variables needed.


---

ðŸ”µ Prompt Block 6: Show Final Comparison

> Letâ€™s assume notebook outputs:



{
  "after_critical": 0,
  "after_high": 2,
  "after_medium": 3,
  "after_low": 4
}

Here is the before vs after vulnerability comparison:

| Severity | Before | After |
|----------|--------|-------|
| ðŸ”´ Critical | {{before_critical}} | {{after_critical}} |
| ðŸŸ  High     | {{before_high}}     | {{after_high}}     |
| ðŸŸ¡ Medium   | {{before_medium}}   | {{after_medium}}   |
| ðŸŸ¢ Low      | {{before_low}}      | {{after_low}}      |

Your fixed project is available at:
`account1-env5-s3-bucket-457650192243/autosecure-output/fixed.zip`

Would you like to scan another project?

âœ… No new variables â€” all values reused.


---

âœ… Summary of Required Variables Across Flow

Variable	Description

repo_url	GitHub repo input
s3_input_bucket	S3 bucket name
s3_input_key	S3 key of uploaded ZIP
inline_java_project	(Optional) pasted code
source_type	repo / s3 / inline
input_json	compiled config
before_critical, before_high, ...	scan 1 output
target_java_version, target_spring_version, upgrade_all_dependencies	upgrade plan
after_critical, etc.	scan 2 output



---

Would you like a copy-paste version of this as JSON or canvas for import into Bedrock?

Letâ€™s lock this down ðŸ’ª and get your scanner production-ready.

