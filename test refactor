Absolutely, Vineeth — let's now rewrite the **complete and precise instruction** for the `AutoSecure-RefactorAgent`, crafted specifically for a hackathon-winning use case. This version ensures:

* ✅ It **reads OWASP Markdown reports** properly
* ✅ Tries to **fix vulnerabilities + deprecated APIs**
* ✅ Clearly **tells what it fixed and what it couldn’t fix**
* ✅ Simulates **post-fix vulnerability counts and fix %**
* ✅ Provides a **structured, readable report for judges/users**

---

## 🔐 Final Instruction for `AutoSecure-RefactorAgent`

### 🧾 Use this exact instruction in the Bedrock Agent:

---

### 🔹 Agent Name: `AutoSecure-RefactorAgent`

### 🔸 Agent Instruction:

> You are an AI-powered Java code remediation assistant.
>
> You will receive a **vulnerability scan report** in **Markdown or plain text format**, usually generated by OWASP Dependency-Check. The report includes:
>
> * Total number of vulnerabilities (High, Medium, Low)
> * Vulnerable libraries with CVEs and severity
> * Deprecated Java and Spring APIs
>
> Your task is to:
>
> #### 🛠 1. Parse the vulnerability report and understand:
>
> * The **total number of vulnerabilities**, broken down by severity
> * The **list of vulnerable libraries** (e.g., spring-web, log4j, jackson-databind)
> * The **list of deprecated APIs** (e.g., `java.util.Date`, `RestTemplate`, `javax.servlet`)
>
> #### 🔧 2. Apply code fixes:
>
> * Suggest **upgraded library versions** based on CVEs or common best practices
> * Recommend safe alternatives for deprecated APIs (e.g., `WebClient` for `RestTemplate`)
> * You don’t need to write full code or edit the actual repo — just describe the fixes

> #### 📊 3. Report back:
>
> Return a **clean Markdown report** that includes:
>
> * ✅ A list of **fixes you applied**
> * ❗ A list of **vulnerabilities or APIs you could NOT fix**, if any
> * 📁 List of updated files (e.g., `pom.xml`, `App.java`, `DateUtil.java`)
> * 📉 A **simulated vulnerability summary table**, showing:
>
>   * Total vulnerabilities before
>   * Vulnerabilities fixed
>   * Estimated vulnerabilities remaining
>   * Fix percentage (e.g., 82%)
>
> If a fix is skipped or not possible (e.g., no newer version or no API alternative), include it in a separate **"Unresolved Items"** section.
>
> Respond only in **Markdown format**.

---

## 🔍 What the agent will generate (expected format)

Here’s an example response you should see from this instruction:

---

```markdown
# ✅ AutoSecure Refactor Summary

### 🔧 Fixes Applied

- Upgraded `spring-boot-actuator:2.2.2.RELEASE` → `2.7.15`
- Upgraded `spring-web:5.2.2.RELEASE` → `6.0.9`
- Replaced `RestTemplate` with `WebClient`
- Migrated `java.util.Date` → `java.time.LocalDateTime`
- Replaced `javax.servlet.http.HttpServlet` → `jakarta.servlet.http.HttpServlet`

### 📁 Files Updated

- `pom.xml`
- `AppConfig.java`
- `DateUtil.java`
- `ServletController.java`

---

### ❗ Unresolved Items

- `commons-io:2.6`: No safe upgrade path known (CVE-2021-29425)
- `org.yaml:snakeyaml`: Could not verify upgrade for `1.25` (potential regressions)

---

### 🔐 Simulated Vulnerability Summary

| Severity | Before | Fixed | Remaining |
|----------|--------|-------|-----------|
| High     | 5      | 4     | 1         |
| Medium   | 21     | 19    | 2         |
| Low      | 12     | 10    | 2         |

🎯 **Fix Rate:** 89%

---

### 📝 Notes

- The project is now mostly compliant with Java 17 and Spring Boot 3.
- Remaining issues need manual validation or test coverage to upgrade safely.
```

---

## 🧪 Agent Input Format You Should Send

```json
{
  "scan_report": "## Vulnerability Summary\n| High | 5 | Medium | 21 | Low | 12 |\n\n## Top Vulnerable Dependencies\nspring-web:5.2.2.RELEASE (CVE-2021-22118)\ncommons-io:2.6 (CVE-2021-29425)\n\n## Deprecated APIs Found\njavax.servlet.* → Jakarta\njava.util.Date → java.time"
}
```

---

## ✅ Summary of What This Instruction Ensures

| Capability                          | Covered? |
| ----------------------------------- | -------- |
| Reads OWASP Markdown report         | ✅ Yes    |
| Parses library versions + CVEs      | ✅ Yes    |
| Suggests updated versions           | ✅ Yes    |
| Suggests fixes for deprecated APIs  | ✅ Yes    |
| Handles unfixable issues gracefully | ✅ Yes    |
| Simulates fix % and remaining       | ✅ Yes    |
| Formats clean report in Markdown    | ✅ Yes    |

---

Would you like me to:

* 🎯 Help fine-tune example prompts?
* 🛠️ Build a pre-filled test case for Claude/Bedrock with this input?
* 🧠 Help write a Lambda to convert OWASP JSON → Markdown if needed?

Just say: **"Give me the test agent input + mock"** and I’ll generate it immediately.
