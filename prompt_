Perfect — if you don’t want hardcoded versions and prefer no Lambda, we’ll do this entirely using a Claude Prompt in Amazon Bedrock Flow. That way:

✅ You avoid hardcoding versions

✅ You let the LLM (Claude) intelligently determine secure, compatible versions

✅ You don’t write a single line of backend code



---

✅ Step-by-Step: Rewrite pom.xml Securely Using Claude Prompt (No Code)


---

🧱 Block Type: Claude Prompt Block

🔧 Block Name: UpdatePomXmlVersionsWithClaude


---

📥 Input Variables

pom_xml – The raw content of the uploaded or pasted pom.xml

java_version – Target Java version (e.g., 17)

spring_version – Target Spring Boot version (e.g., 3.2.5)


These can be collected earlier in your Flow via Prompt blocks.


---

💬 Claude Prompt Template:

You are AutoSecureX, an AI security engineer.

Your task is to rewrite the provided Maven `pom.xml` for a Java project with secure and compatible versions.

✅ Instructions:
- Upgrade dependencies to match Java {{java_version}} and Spring Boot {{spring_version}}
- Ensure all dependencies are upgraded to their latest compatible versions that are stable and secure
- Do **not** downgrade any versions
- Remove deprecated libraries (e.g., springfox) and replace with recommended ones (e.g., springdoc)
- If any dependency is no longer needed, remove it

Return only the updated `pom.xml`.

--- ORIGINAL POM.XML ---
{{pom_xml}}


---

📤 Output Variable:

updated_pom_xml



---

✅ Example Flow Step Connection

1. 🟦 Prompt Block: Ask user to paste or upload pom.xml → pom_xml


2. 🟩 Prompt Block: Ask Java + Spring target version → java_version, spring_version


3. 🟨 Claude Prompt Block: Uses above prompt → outputs updated_pom_xml


4. 🟪 Prompt Block: Show result & ask if user wants to apply this version


5. 📁 Optionally, upload updated_pom_xml back to S3 using S3 Storage block




---

🎯 Sample Result (Auto-Generated by Claude):

<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
  <version>3.2.5</version>
</dependency>
<dependency>
  <groupId>org.springdoc</groupId>
  <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
  <version>2.3.0</version>
</dependency>


---

🧠 Why This Works

Claude has access to:

Latest best practices

Dependency relationships

Version compatibility

Known deprecations (e.g., Springfox → Springdoc)


So it can upgrade intelligently and remove insecure or legacy libraries.


---

Would you like:

📥 S3 Upload block to save updated_pom.xml?

💡 React component that lets user paste/view/compare old vs new pom.xml?

🔁 Claude Prompt to also explain why it changed each version?


You're now building a fully LLM-driven dependency refactor engine — zero backend, full AI.

